/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package v.solution;

/**
 *
 * @author Administrator
 */
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import v.DB.DB;
import validation.CurrencyValidation;
import validation.EmailValidation;
import validation.NumberValidation;

public class Item extends javax.swing.JPanel {

    /**
     * Creates new form Product
     */
    DefaultTableModel dtm;
    ResultSet rs;

    public Item() {
        initComponents();
        product();
        jPanel6.setVisible(false);

        tableProduct();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        product_combo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txt_sellingprice = new javax.swing.JTextField();
        save_btn = new javax.swing.JButton();
        update_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        rad_active = new javax.swing.JRadioButton();
        rad_inactive = new javax.swing.JRadioButton();
        txt_barcode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_warrenty = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        exdate = new rojeru_san.componentes.RSDateChooser();
        manudate = new rojeru_san.componentes.RSDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_qty = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txt_purchasePrice = new javax.swing.JTextField();
        txt_updateStatus = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        delete_btn1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_item = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btn_PSearch = new javax.swing.JButton();
        txt_pSearch = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        psearch = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Product                 :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Barcode                :");

        product_combo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        product_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product" }));
        product_combo.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), null));
        product_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                product_comboActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Selling Price          :");

        txt_sellingprice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_sellingprice.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), null));

        save_btn.setBackground(new java.awt.Color(93, 167, 219));
        save_btn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        save_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/save.png"))); // NOI18N
        save_btn.setText("Save");
        save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_btnActionPerformed(evt);
            }
        });

        update_btn.setBackground(new java.awt.Color(93, 167, 219));
        update_btn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        update_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/update.png"))); // NOI18N
        update_btn.setText("Update");
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });

        delete_btn.setBackground(new java.awt.Color(93, 167, 219));
        delete_btn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/delete.png"))); // NOI18N
        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Status                   :");

        buttonGroup1.add(rad_active);
        rad_active.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rad_active.setText("Active");

        buttonGroup1.add(rad_inactive);
        rad_inactive.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rad_inactive.setText("Inactive");

        txt_barcode.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_barcode.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), new java.awt.Color(0, 153, 204)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Warrenty              :");

        txt_warrenty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_warrenty.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), null));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Month");

        jCheckBox1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jCheckBox1.setText("Expiry date");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(0, 153, 204))); // NOI18N
        jPanel6.setMinimumSize(new java.awt.Dimension(300, 1000));

        exdate.setPlaceholder("Expire Date");

        manudate.setPlaceholder("Manufactured Date");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Expire Date");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Manuf Date");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manudate, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(exdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(manudate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Qty                        :");

        txt_qty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_qty.setText("0");
        txt_qty.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), null));
        txt_qty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_qtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_qtyFocusLost(evt);
            }
        });
        txt_qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_qtyKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Purchase Price     :");

        txt_purchasePrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_purchasePrice.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), null));

        txt_updateStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_updateStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 153, 204), null));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Update Limit        :");

        delete_btn1.setBackground(new java.awt.Color(93, 167, 219));
        delete_btn1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        delete_btn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/cleaning.png"))); // NOI18N
        delete_btn1.setText("Clear");
        delete_btn1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        delete_btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(save_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(update_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                            .addComponent(delete_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete_btn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rad_active)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rad_inactive)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txt_updateStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_purchasePrice)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(4, 4, 4)
                                .addComponent(product_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_barcode)
                                    .addComponent(txt_sellingprice)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(txt_warrenty, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(product_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_sellingprice, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_warrenty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_purchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_updateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rad_active)
                    .addComponent(rad_inactive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(update_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delete_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delete_btn1)
                .addContainerGap())
        );

        tbl_item.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tbl_item.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product", "Brand", "Category", "SubCategory", "Selling Price", "Warrenty ", "Manuf. Date", "Expire Date", "Qty"
            }
        ));
        tbl_item.setGridColor(new java.awt.Color(93, 167, 219));
        tbl_item.setRowHeight(30);
        tbl_item.setSelectionBackground(new java.awt.Color(93, 167, 219));
        tbl_item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_itemMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_item);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jPanel3.setBackground(new java.awt.Color(93, 167, 219));

        btn_PSearch.setBackground(new java.awt.Color(93, 167, 219));
        btn_PSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_PSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/search.png"))); // NOI18N
        btn_PSearch.setText("Search By P.ID");
        btn_PSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PSearchActionPerformed(evt);
            }
        });

        txt_pSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_pSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txt_pSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_pSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addComponent(txt_pSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_PSearch)
                .addGap(35, 35, 35))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_PSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_pSearch))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/product.png"))); // NOI18N
        jLabel1.setText("ITEM");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        psearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        psearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                psearchKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Search Product :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(psearch, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(psearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_PSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PSearchActionPerformed
        // TODO add your handling code here:

        searchP(txt_pSearch.getText());
    }//GEN-LAST:event_btn_PSearchActionPerformed

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        // TODO add your handling code here:
        if (jPanel6.isShowing()) {
            jPanel6.setVisible(false);

        } else {
            jPanel6.setVisible(true);
        }
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void product_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_product_comboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_product_comboActionPerformed

    private void save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_btnActionPerformed

        boolean statusC = checkValidate();

        if (statusC) {

            int pId = 0;
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

            String itemId = "";
            String barCode = txt_barcode.getText();
            String sellingPrice = txt_sellingprice.getText();
            String warrenty = txt_warrenty.getText();
            int quantity = Integer.parseInt(txt_qty.getText());
            String updateStatus = txt_updateStatus.getText();
            String purchasePrice = txt_purchasePrice.getText();

            long lastInsertId = -1;

            if (!product_combo.getSelectedItem().toString().equals("Product") && !barCode.equals("") && !sellingPrice.equals("") && !warrenty.equals("") && quantity != 0 && !txt_purchasePrice.getText().equals("")) {

                if (jCheckBox1.isSelected() && manudate.getDatoFecha() != null && exdate.getDatoFecha() != null) {

                    double profit = Double.parseDouble(sellingPrice) - Double.parseDouble(purchasePrice);

                    String brand = product_combo.getSelectedItem().toString();
                    String productId[] = brand.split("-", 0);
                    pId = Integer.parseInt(productId[0]);

                    String fmanuDate = formatter.format(manudate.getDatoFecha());
                    String fexDate = formatter.format(exdate.getDatoFecha());

                    int status = 1;
                    if (rad_active.isSelected()) {
                    } else {
                        status = 0;
                    }

                    String query = "INSERT INTO `item`(`Product_Id`, `Barcode`, `SellingPrice`, `Warrenty`, `ManufactureDate`, `ExpireDate`, `UpdateStatus`, `PurchasingPrice`,`Profit`, `Status`) VALUES ('" + pId + "','" + barCode + "','" + sellingPrice + "','" + warrenty + "','" + fmanuDate + "','" + fexDate + "','" + updateStatus + "','" + txt_purchasePrice.getText() + "' ,'" + profit + "','" + status + "')";

                    try {

                        DB.push(query);

                        query = "select Id from item where Id=(SELECT LAST_INSERT_ID())";

                        ResultSet rs = DB.search(query);

                        if (rs.next()) {
                            lastInsertId = rs.getLong("Id");

                        }

                        query = "INSERT INTO available_quantity (Quantity, item_Id) VALUES ('" + quantity + "','" + lastInsertId + "')";
                        DB.push(query);

                        JOptionPane.showMessageDialog(this, "Saved...");
                        clear();
                        tableProduct();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    double profit = Double.parseDouble(sellingPrice) - Double.parseDouble(purchasePrice);

                    String brand = product_combo.getSelectedItem().toString();
                    String productId[] = brand.split("-", 0);
                    pId = Integer.parseInt(productId[0]);

                    int status = 1;
                    if (rad_active.isSelected()) {
                    } else {
                        status = 0;
                    }

                    String query = "INSERT INTO `item`(`Product_Id`, `Barcode`, `SellingPrice`, `Warrenty`, `UpdateStatus`, `PurchasingPrice`,`Profit`, `Status`) VALUES ('" + pId + "','" + barCode + "','" + sellingPrice + "','" + warrenty + "','" + updateStatus + "','" + txt_purchasePrice.getText() + "' ,'" + profit + "','" + status + "')";

                    try {

                        DB.push(query);

                        query = "select Id from item where Id=(SELECT LAST_INSERT_ID());";

                        ResultSet rs = DB.search(query);

                        if (rs.next()) {
                            lastInsertId = rs.getLong("Id");

                        }

                        query = "INSERT INTO available_quantity (Quantity, item_Id) VALUES ('" + quantity + "','" + lastInsertId + "')";
                        DB.push(query);

                        JOptionPane.showMessageDialog(this, "Saved...");
                        tableProduct();
                        clear();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "Missing Details...");
            }
        }
    }//GEN-LAST:event_save_btnActionPerformed

    private void psearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_psearchKeyReleased
        // TODO add your handling code here:
        String query = psearch.getText();
        filtertablesubCat(query);
    }//GEN-LAST:event_psearchKeyReleased

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed
        // TODO add your handling code here:
        boolean statusC = checkValidate();

        if (statusC) {

        }

    }//GEN-LAST:event_update_btnActionPerformed

    private void txt_pSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_pSearchKeyReleased
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchP(txt_pSearch.getText());
        }
    }//GEN-LAST:event_txt_pSearchKeyReleased

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        // TODO add your handling code here:

        int option = JOptionPane.showConfirmDialog(this, "Delete Is Sure ?");

        if (option == 0) {
            String itemId = "";

            int selectedRow = tbl_item.getSelectedRow();

            if (selectedRow != -1) {

                dtm = (DefaultTableModel) tbl_item.getModel();
                itemId = dtm.getValueAt(selectedRow, 0).toString();

                try {

                    String query = "UPDATE `item` SET Status = '0' WHERE Id= '" + itemId + "'";
                    DB.push(query);
                    query = "UPDATE `available_quantity` SET Quantity = '0' WHERE item_Id= '" + itemId + "'";
                    DB.push(query);
                    JOptionPane.showMessageDialog(this, "Deleted...");
                    tableProduct();
                    clear();
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else {
                JOptionPane.showMessageDialog(this, "First Select A Item On The Table...");
            }

        }
    }//GEN-LAST:event_delete_btnActionPerformed

    private void txt_qtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_qtyKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txt_qtyKeyReleased

    private void txt_qtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_qtyFocusLost
        // TODO add your handling code here:
        if (txt_qty.getText().equals("")) {
            txt_qty.setText("0");
        }
    }//GEN-LAST:event_txt_qtyFocusLost

    private void tbl_itemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_itemMouseClicked
        // TODO add your handling code here:

        String activeStatus = "";
        String itemId = "";
        int selectedRow = tbl_item.getSelectedRow();
        dtm = (DefaultTableModel) tbl_item.getModel();
        itemId = dtm.getValueAt(selectedRow, 0).toString();

        String pCode = "";
        String barCode = "";
        String sellingPrice = "";
        String warrenty = "";

        String purchasePrice = "";
        String uStatus = "";

        String pId = null;
        String bId = null;
        String catId = null;
        String scId = null;
        String desc = null;

        String bName = null;
        String cName = null;
        String scName = null;

        String query = "SELECT * FROM `item` WHERE status = '1'";
        try {
            ResultSet rs = DB.search(query);
            String quantity = "";
            if (rs.next()) {
                Vector v = new Vector();
                itemId = rs.getString("Id");
                pCode = rs.getString("Product_Id");
                barCode = rs.getString("Barcode");
                sellingPrice = rs.getString("SellingPrice");
                warrenty = rs.getString("Warrenty");
                Date ManufactureDate = rs.getDate("ManufactureDate");
                Date ExpireDate = rs.getDate("ExpireDate");
                purchasePrice = rs.getString("PurchasingPrice");
                uStatus = rs.getString("updateStatus");
                activeStatus = rs.getString("Status");

                String g = "10";
                searchP(g);

                String query2 = "SELECT `Quantity` FROM `available_quantity` WHERE item_Id = '" + rs.getString("Id") + "'";
                ResultSet rs2 = DB.search(query2);
                if (rs2.next()) {
                    quantity = rs2.getString("Quantity");

                    if (!quantity.equals("0")) {

                        // Set value after click table
                        pId = product_combo.getSelectedItem().toString();
                        String[] supplierId = pId.split("-");
                        pId = supplierId[0];

                        searchP(pId);
                        txt_barcode.setText(barCode);
                        txt_sellingprice.setText(sellingPrice);
                        txt_warrenty.setText(warrenty);
                        txt_qty.setText(quantity);
                        txt_purchasePrice.setText(purchasePrice);
                        txt_updateStatus.setText(uStatus);

                        if (activeStatus.equals("1")) {
                            rad_active.doClick();
                        } else {
                            rad_inactive.doClick();
                        }

                        manudate.setDatoFecha(ManufactureDate);
                        exdate.setDatoFecha(ExpireDate);

                    }
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tbl_itemMouseClicked

    private void delete_btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btn1ActionPerformed
        // TODO add your handling code here:

        clear();
        tableProduct();


    }//GEN-LAST:event_delete_btn1ActionPerformed

    private void txt_qtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_qtyFocusGained
        // TODO add your handling code here:

        if (txt_qty.getText().equals("0")) {
            txt_qty.setText("");
        }

    }//GEN-LAST:event_txt_qtyFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_PSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton delete_btn;
    private javax.swing.JButton delete_btn1;
    private rojeru_san.componentes.RSDateChooser exdate;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private rojeru_san.componentes.RSDateChooser manudate;
    private javax.swing.JComboBox<String> product_combo;
    private javax.swing.JTextField psearch;
    private javax.swing.JRadioButton rad_active;
    private javax.swing.JRadioButton rad_inactive;
    private javax.swing.JButton save_btn;
    private javax.swing.JTable tbl_item;
    private javax.swing.JTextField txt_barcode;
    private javax.swing.JTextField txt_pSearch;
    private javax.swing.JTextField txt_purchasePrice;
    private javax.swing.JTextField txt_qty;
    private javax.swing.JTextField txt_sellingprice;
    private javax.swing.JTextField txt_updateStatus;
    private javax.swing.JTextField txt_warrenty;
    private javax.swing.JButton update_btn;
    // End of variables declaration//GEN-END:variables

    private void product() {
        String product = "";
        int pId = 0;
        String bId = "";
        String cId = "";
        String sCId = "";

        String query = "SELECT Description,id,BrandId,CatId,SubCatId FROM product WHERE status= '1'";
        try {
            ResultSet rs = DB.search(query);
            while (rs.next()) {

                product = rs.getString("Description");
                pId = rs.getInt("id");
                bId = rs.getString("BrandId");
                cId = rs.getString("CatId");
                sCId = rs.getString("SubCatId");

                query = "SELECT BrandName FROM brand WHERE Id= '" + bId + "'";
                ResultSet rs1 = DB.search(query);
                query = "SELECT Name FROM category WHERE Id= '" + cId + "'";
                ResultSet rs2 = DB.search(query);
                query = "SELECT Name FROM subcat WHERE Id= '" + sCId + "'";
                ResultSet rs3 = DB.search(query);

                if (rs1.next() && rs2.next() && rs3.next()) {
                    bId = rs1.getString("BrandName");
                    cId = rs2.getString("Name");
                    sCId = rs3.getString("Name");

                }

                product_combo.addItem(pId + "-" + product + " " + bId + " " + cId + " " + sCId);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void tableProduct() {
        dtm = (DefaultTableModel) tbl_item.getModel();
        dtm.setRowCount(0);

        String pCode = "";
        String barCode = "";
        String sellingPrice = "";
        String warrenty = "";
        String ManufactureDate = "";
        String ExpireDate = "";
        String purchasePrice = "";
        String Status = "";
        String itemId = null;

        String pId = null;
        String bId = null;
        String catId = null;
        String scId = null;
        String desc = null;

        String bName = null;
        String cName = null;
        String scName = null;

        String query = "SELECT * FROM `item` WHERE status = '1'";
        try {
            ResultSet rs = DB.search(query);
            String quantity = "";
            while (rs.next()) {
                Vector v = new Vector();
                itemId = rs.getString("Id");
                pCode = rs.getString("Product_Id");
                barCode = rs.getString("Barcode");
                sellingPrice = rs.getString("SellingPrice");
                warrenty = rs.getString("Warrenty");
                ManufactureDate = rs.getString("ManufactureDate");
                ExpireDate = rs.getString("ExpireDate");
                purchasePrice = rs.getString("PurchasingPrice");
                Status = rs.getString("updateStatus");

                String query2 = "SELECT `Quantity` FROM `available_quantity` WHERE item_Id = '" + rs.getString("Id") + "'";
                ResultSet rs2 = DB.search(query2);
                if (rs2.next()) {
                    quantity = rs2.getString("Quantity");

                    if (!quantity.equals("0")) {

                        query2 = "SELECT `BrandId`, `CatId`, `SubCatId`, `Description` FROM `product` WHERE Id = '" + pCode + "'";
                        ResultSet rs3 = DB.search(query2);
                        if (rs3.next()) {
                            bId = rs3.getString("BrandId");
                            catId = rs3.getString("CatId");
                            scId = rs3.getString("SubCatId");
                            desc = rs3.getString("Description");
                        }

                        query2 = "SELECT `BrandName` FROM `brand` WHERE Id = '" + bId + "'";
                        ResultSet rs4 = DB.search(query2);
                        if (rs4.next()) {
                            bName = rs4.getString("BrandName");
                        }

                        query2 = "SELECT `Name` FROM `category` WHERE Id = '" + catId + "'";
                        ResultSet rs5 = DB.search(query2);
                        if (rs5.next()) {
                            cName = rs5.getString("Name");
                        }

                        query2 = "SELECT `Name` FROM `subcat` WHERE Id = '" + scId + "'";
                        ResultSet rs6 = DB.search(query2);
                        if (rs6.next()) {
                            scName = rs6.getString("Name");
                        }

                        v.add(itemId);
                        v.add(pCode + "-" + desc);
                        v.add(bName);
                        v.add(cName);
                        v.add(scName);
                        v.add(sellingPrice);
                        v.add(warrenty + " " + "Months");
                        v.add(ManufactureDate);
                        v.add(ExpireDate);
                        v.add(quantity);

                        dtm.addRow(v);

                    }
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void filtertablesubCat(String query) {
        dtm = (DefaultTableModel) tbl_item.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        tbl_item.setRowSorter(tr);

        tr.setRowFilter(RowFilter.regexFilter(query));
    }

    private void searchP(String key) {
        String product = "";
        int pId = 0;
        String bId = "";
        String cId = "";
        String sCId = "";

        String query = "SELECT Description,Id,BrandId,CatId,SubCatId FROM product WHERE Id= '" + key + "'";
        try {
            ResultSet rs = DB.search(query);
            if (rs.next()) {

                product = rs.getString("Description");
                pId = rs.getInt("id");
                bId = rs.getString("BrandId");
                cId = rs.getString("CatId");
                sCId = rs.getString("SubCatId");

                query = "SELECT BrandName FROM brand WHERE Id= '" + bId + "'";
                ResultSet rs1 = DB.search(query);
                query = "SELECT Name FROM category WHERE Id= '" + cId + "'";
                ResultSet rs2 = DB.search(query);
                query = "SELECT Name FROM subcat WHERE Id= '" + sCId + "'";
                ResultSet rs3 = DB.search(query);

                int productCombo = product_combo.getItemCount();
                String valueatIndex = null;
                for (int i = 0; productCombo >= i; i++) {

                    valueatIndex = product_combo.getItemAt(i);

                    String[] valueatIndex1 = valueatIndex.split("-");
                    String valueatIndex2 = valueatIndex1[0];

                    if (valueatIndex2.equals(key)) {
                        product_combo.setSelectedIndex(i);
                        break;
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "Nothing To search");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clear() {
        txt_barcode.setText("");
        txt_pSearch.setText("");
        txt_purchasePrice.setText("");
        txt_qty.setText("");
        txt_sellingprice.setText("");
        txt_updateStatus.setText("");
        txt_warrenty.setText("0");
        rad_active.doClick();
        product_combo.setSelectedIndex(0);
    }

    private boolean checkValidate() {

        boolean status = false;
        if (NumberValidation.validateNumber(txt_updateStatus.getText())) {
            if (CurrencyValidation.validateCurrency(txt_purchasePrice.getText())) {
                if (CurrencyValidation.validateCurrency(txt_sellingprice.getText())) {
                    if (NumberValidation.validateNumber(txt_warrenty.getText())) {
                        if (NumberValidation.validateNumber(txt_qty.getText())) {

                            status = true;
                        } else {
                            JOptionPane.showMessageDialog(this, "Incorrect Quantity Format");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Incorrect Warrenty Format");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Incorrect Selling Price Format");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Incorrect Purchasing Format");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect Update Limit Format");
        }
        return status;

    }
}
