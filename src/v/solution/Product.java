/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package v.solution;

/**
 *
 * @author Administrator
 */
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import v.DB.DB;

public class Product extends javax.swing.JPanel {

    /**
     * Creates new form Product
     */
    ResultSet rs;
    DefaultTableModel dtm;

    public Product() {
        initComponents();
        brandCombo();
        categoryCombo();
        subcategoryCombo();
        combo_category.disable();
        combo_subcat.disable();
        productTable();
        supplier();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        combo_brand = new javax.swing.JComboBox<>();
        combo_category = new javax.swing.JComboBox<>();
        combo_subcat = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_product = new javax.swing.JTextField();
        btn_save = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        rad_active = new javax.swing.JRadioButton();
        rad_inactive = new javax.swing.JRadioButton();
        btn_clear = new javax.swing.JButton();
        checkbox_cate = new javax.swing.JCheckBox();
        checkbox_subcat = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        combo_supplier = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_product = new javax.swing.JTable();
        txt_search = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jTextField9 = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Brand                 :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Category            :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Sub Category     :");

        combo_brand.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        combo_brand.setForeground(new java.awt.Color(0, 102, 153));
        combo_brand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brand" }));

        combo_category.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        combo_category.setForeground(new java.awt.Color(0, 102, 153));
        combo_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Category" }));

        combo_subcat.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        combo_subcat.setForeground(new java.awt.Color(0, 102, 153));
        combo_subcat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sub Category" }));

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add New Brand");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Add New Category");
        jButton2.setPreferredSize(new java.awt.Dimension(145, 26));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Add New SubCategory");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Product Name   :");

        txt_product.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btn_save.setBackground(new java.awt.Color(93, 167, 219));
        btn_save.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/save.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_update.setBackground(new java.awt.Color(93, 167, 219));
        btn_update.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/update.png"))); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(93, 167, 219));
        btn_delete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/delete.png"))); // NOI18N
        btn_delete.setText("Delete Selected");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Status :");

        buttonGroup1.add(rad_active);
        rad_active.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rad_active.setSelected(true);
        rad_active.setText("Active");

        buttonGroup1.add(rad_inactive);
        rad_inactive.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rad_inactive.setText("Inactive");

        btn_clear.setBackground(new java.awt.Color(93, 167, 219));
        btn_clear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/cleaning.png"))); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        checkbox_cate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkbox_cate.setForeground(new java.awt.Color(204, 0, 51));
        checkbox_cate.setText("Category");
        checkbox_cate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkbox_cateMouseClicked(evt);
            }
        });

        checkbox_subcat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkbox_subcat.setForeground(new java.awt.Color(204, 0, 51));
        checkbox_subcat.setText("Sub Category");
        checkbox_subcat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkbox_subcatMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Supplier     :");

        combo_supplier.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        combo_supplier.setForeground(new java.awt.Color(0, 102, 153));
        combo_supplier.setMaximumRowCount(100);
        combo_supplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SUPPLIER" }));
        combo_supplier.setPreferredSize(new java.awt.Dimension(157, 40));
        combo_supplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_supplierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(checkbox_subcat, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkbox_cate, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rad_active, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rad_inactive))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txt_product)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(combo_subcat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(combo_category, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(combo_brand, 0, 240, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combo_supplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_product, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_brand)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkbox_cate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combo_category))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkbox_subcat, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combo_subcat))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rad_active)
                                    .addComponent(rad_inactive)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_supplier, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109)
                .addComponent(btn_save)
                .addGap(18, 18, 18)
                .addComponent(btn_update)
                .addGap(18, 18, 18)
                .addComponent(btn_delete)
                .addGap(18, 18, 18)
                .addComponent(btn_clear)
                .addGap(39, 39, 39))
        );

        table_product.setBackground(new java.awt.Color(0, 102, 102));
        table_product.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table_product.setForeground(new java.awt.Color(255, 255, 255));
        table_product.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product", "Brand", "Category", "Sub Category", "Supplier", "Active Status"
            }
        ));
        table_product.setGridColor(new java.awt.Color(93, 167, 219));
        table_product.setRowHeight(30);
        table_product.setSelectionBackground(new java.awt.Color(93, 167, 219));
        table_product.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_productMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_product);

        txt_search.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_search.setPreferredSize(new java.awt.Dimension(64, 30));
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Search Product :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1076, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jPanel3.setBackground(new java.awt.Color(93, 167, 219));

        jButton5.setBackground(new java.awt.Color(93, 167, 219));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/search.png"))); // NOI18N
        jButton5.setText("Search By P.ID");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextField9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblId, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(35, 35, 35))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9)
                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/v/solution/image/product.png"))); // NOI18N
        jLabel1.setText("PRODUCT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new Brand().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new Category().setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new SubCat().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        // TODO add your handling code here:
        long lastInsertId = -1;
        String productName = txt_product.getText();

//           Brand id
        String brand = combo_brand.getSelectedItem().toString();
        String[] brandId = brand.split("-");
        String brandId2 = brandId[0];

//        cat id
        String cat = combo_category.getSelectedItem().toString();
        String[] catId = cat.split("-");
        String catId2 = catId[0];

//        subcat id
        String subcat = combo_subcat.getSelectedItem().toString();
        String[] subcatId = subcat.split("-");
        String subcatId2 = subcatId[0];

//        supplier id
        String supplier = combo_supplier.getSelectedItem().toString();
        String[] supplierId = supplier.split("-");
        String supplierId2 = supplierId[0];

        String activeStatus = "";

        if (rad_active.isSelected()) {
            activeStatus = "1";
        } else {
            activeStatus = "0";
        }

        if (!productName.equals("") && !brandId2.equals("Brand")) {

            if (!supplierId2.equals("SUPPLIER")) {

                if (catId2.equals("Category") && subcatId2.equals("Sub Category")) {

                    String query = "INSERT INTO `product`(`BrandId`,`Description`, `ActiveStatus`) VALUES ('" + brandId2 + "','" + productName + "','" + activeStatus + "')";

                    try {

                        DB.push(query);

                                query = "select *from product where Id=(SELECT LAST_INSERT_ID());";

                        ResultSet rs = DB.search(query);

                        if (rs.next()) {
                            lastInsertId = rs.getLong("Id");
                            String supplierHasProductQuery = "INSERT INTO `supplier_has_product`(`supplier_Id`, `product_Id`) VALUES ('" + supplierId2 + "','" + lastInsertId + "')";
                            DB.push(supplierHasProductQuery);
                            JOptionPane.showMessageDialog(this, "New Product Is Saved");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    String query = "INSERT INTO `product`(`BrandId`,`CatId`, `SubCatId`, `Description`, `ActiveStatus`) VALUES ('" + brandId2 + "','" + catId2 + "','" + subcatId2 + "','" + productName + "','" + activeStatus + "')";

                    if (!catId2.equals("Category") && subcatId2.equals("Sub Category")) {
                        query = "INSERT INTO `product`(`BrandId`,`CatId`,`Description`, `ActiveStatus`) VALUES ('" + brandId2 + "','" + catId2 + "','" + productName + "','" + activeStatus + "')";
                    }
                    if (catId2.equals("Category") && !subcatId2.equals("Sub Category")) {
                        query = "INSERT INTO `product`(`BrandId`, `SubCatId`,`Description`, `ActiveStatus`) VALUES ('" + brandId2 + "','" + subcatId2 + "','" + productName + "','" + activeStatus + "')";
                    }

                    try {

                        DB.push(query);
                        query = "SELECT LAST_INSERT_ID()";

                        ResultSet rs = DB.search(query);

                        if (rs.next()) {
                            lastInsertId = rs.getLong(1);
                            String supplierHasProductQuery = "INSERT INTO `supplier_has_product`(`supplier_Id`, `product_Id`) VALUES ('" + supplierId2 + "','" + lastInsertId + "')";
                            DB.push(supplierHasProductQuery);
                            JOptionPane.showMessageDialog(this, "New Product Is Saved");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            } else {
                JOptionPane.showMessageDialog(this, "Please Choose A Supplier");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Product Name Or Brand Missing");
        }
        productTable();
clear();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void checkbox_cateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkbox_cateMouseClicked
        // TODO add your handling code here:
        if (checkbox_cate.isSelected()) {
            combo_category.enable();
        } else {
            combo_category.disable();
            combo_category.setSelectedIndex(0);
        }

    }//GEN-LAST:event_checkbox_cateMouseClicked

    private void checkbox_subcatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkbox_subcatMouseClicked
        // TODO add your handling code here:
        if (checkbox_subcat.isSelected()) {
            combo_subcat.enable();
        } else {
            combo_subcat.disable();
            combo_subcat.setSelectedIndex(0);
        }
    }//GEN-LAST:event_checkbox_subcatMouseClicked

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        // TODO add your handling code here:
        String query = txt_search.getText();
        filtertablesubCat(query);
    }//GEN-LAST:event_txt_searchKeyReleased

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:

        String id = lblId.getText();
        long lastInsertId = -1;
        String productName = txt_product.getText();

//           Brand id
        String brand = combo_brand.getSelectedItem().toString();
        String[] brandId = brand.split("-");
        String brandId2 = brandId[0];

//        cat id
        String cat = combo_category.getSelectedItem().toString();
        String[] catId = cat.split("-");
        String catId2 = catId[0];

//        subcat id
        String subcat = combo_subcat.getSelectedItem().toString();
        String[] subcatId = subcat.split("-");
        String subcatId2 = subcatId[0];

//        supplier id
        String supplier = combo_supplier.getSelectedItem().toString();
        String[] supplierId = supplier.split("-");
        String supplierId2 = supplierId[0];

        String activeStatus = "";

        if (rad_active.isSelected()) {
            activeStatus = "1";
        } else {
            activeStatus = "0";
        }

        if (!productName.equals("") && !brandId2.equals("Brand")) {

            if (!supplierId2.equals("SUPPLIER")) {

                if (catId2.equals("Category") && subcatId2.equals("Sub Category")) {

                    String query = "UPDATE `product` SET `BrandId`='" + brandId2 + "',`Description`='" + productName + "',`ActiveStatus`='" + activeStatus + "' WHERE Id = '" + id + "'";

                    try {

                        DB.push(query);

                        query = "SELECT LAST_INSERT_ID()";

                        ResultSet rs = DB.search(query);

                        if (rs.next()) {
                            lastInsertId = rs.getLong(1);
                            String supplierHasProductQuery = "UPDATE `supplier_has_product` SET `supplier_Id`='" + supplierId2 + "' WHERE `product_Id`='" + id + "'";
                            DB.push(supplierHasProductQuery);
                            JOptionPane.showMessageDialog(this, "Product Update Is Success");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {

                    String query = "UPDATE `product` SET `BrandId`='" + brandId2 + "',`CatId`='" + catId2 + "', `SubCatId`='" + subcatId2 + "',`Description`='" + productName + "',`ActiveStatus`='" + activeStatus + "' WHERE Id = '" + id + "'";
                    if (!catId2.equals("Category") && subcatId2.equals("Sub Category")) {

                        query = "UPDATE `product` SET `BrandId`='" + brandId2 + "',`CatId`='" + catId2 + "', `Description`='" + productName + "',`ActiveStatus`='" + activeStatus + "' WHERE Id = '" + id + "'";
                    }
                    if (catId2.equals("Category") && !subcatId2.equals("Sub Category")) {

                        query = "UPDATE `product` SET `BrandId`='" + brandId2 + "', `SubCatId`='" + subcatId2 + "',`Description`='" + productName + "',`ActiveStatus`='" + activeStatus + "' WHERE Id = '" + id + "'";
                    }

                    try {

                        DB.push(query);
                        query = "SELECT LAST_INSERT_ID()";

                        ResultSet rs = DB.search(query);

                        if (rs.next()) {
                            lastInsertId = rs.getLong(1);

                            String supplierHasProductQuery = "UPDATE `supplier_has_product` SET `supplier_Id`='" + supplierId2 + "' WHERE `product_Id`='" + id + "'";
                            DB.push(supplierHasProductQuery);
                            JOptionPane.showMessageDialog(this, "Product Update Is Success");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            } else {
                JOptionPane.showMessageDialog(this, "Please Choose A Supplier");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Product Name Or Brand Missing");
        }
        productTable();
clear();

    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:

        if (lblId.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "First  Choose Product");
        } else {
            String id = lblId.getText();
            String query = "UPDATE product SET Status = '0' WHERE Id = '" + id + "'";

            int option = JOptionPane.showConfirmDialog(this, "Delete Is Sure ?");

            if (option == 0) {

                try {
                    DB.push(query);
                    JOptionPane.showMessageDialog(this, "Deleted");
                    productTable();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // TODO add your handling code here:
clear();
        productTable();
    }//GEN-LAST:event_btn_clearActionPerformed

    private void combo_supplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_supplierActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_supplierActionPerformed

    private void table_productMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_productMouseClicked
        // TODO add your handling code here:

        String activeStatus = "";
        String pId = "";
        int selectedRow = table_product.getSelectedRow();
        dtm = (DefaultTableModel) table_product.getModel();
        pId = dtm.getValueAt(selectedRow, 0).toString();
        String query = "SELECT * FROM product WHERE Id = '" + pId + "' AND status= '1'";
        String brandId = null;
        String subCatId = null;
        String catId = null;
        try {
            rs = DB.search(query);
            if (rs.next()) {
                txt_product.setText(rs.getString("Description"));

                activeStatus = rs.getString("ActiveStatus");
                brandId = rs.getString("BrandId");
                catId = rs.getString("CatId");
                subCatId = rs.getString("SubCatId");
                lblId.setText(pId);

            }
        } catch (Exception ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (activeStatus.equals("1")) {
            rad_active.doClick();
        } else {
            rad_inactive.doClick();
        }

        int comboBrand = combo_brand.getItemCount();
        String valueatIndex = null;
        for (int i = 0; comboBrand >= i; i++) {

            valueatIndex = combo_brand.getItemAt(i);

            String[] valueatIndex1 = valueatIndex.split("-");
            String valueatIndex2 = valueatIndex1[0];

            if (valueatIndex2.equals(brandId)) {
                combo_brand.setSelectedIndex(i);
                break;
            }
        }

        //combo cat select
        int comboCategory = combo_category.getItemCount();
        String valueatIndexCat = null;
        for (int i = 0; comboCategory >= i; i++) {

            valueatIndexCat = combo_category.getItemAt(i);

            String[] valueatIndex1 = valueatIndexCat.split("-");
            String valueatIndex2 = valueatIndex1[0];

            if (valueatIndex2.equals(catId)) {
                combo_category.setSelectedIndex(i);
                break;
            }
        }

        //combo subcat select
        int comboSubcat = combo_subcat.getItemCount();
        String valueatIndexSubCat = null;
        for (int i = 0; comboSubcat >= i; i++) {

            valueatIndexSubCat = combo_subcat.getItemAt(i);

            String[] valueatIndex1 = valueatIndexSubCat.split("-");
            String valueatIndex2 = valueatIndex1[0];

            if (valueatIndex2.equals(subCatId)) {
                combo_subcat.setSelectedIndex(i);
                break;
            }
        }

        //combo supplier select
        int comboSupplier = combo_supplier.getItemCount();
        String valueatIndexSupplier = null;
        String supplierId = null;

        query = "SELECT `supplier_Id` FROM `supplier_has_product` WHERE `product_Id` = '" + lblId.getText()+"'";
        try {
            rs = DB.search(query);
            if(rs.next()){
            supplierId = rs.getString("supplier_Id");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int i = 0; comboSupplier >= i; i++) {

            valueatIndexSupplier = combo_supplier.getItemAt(i);

            String[] valueatIndex1 = valueatIndexSupplier.split("-");
            String valueatIndex2 = valueatIndex1[0];

            if (valueatIndex2.equals(supplierId)) {
                combo_supplier.setSelectedIndex(i);
                break;
            }
        }

    }//GEN-LAST:event_table_productMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox checkbox_cate;
    private javax.swing.JCheckBox checkbox_subcat;
    private javax.swing.JComboBox<String> combo_brand;
    private javax.swing.JComboBox<String> combo_category;
    private javax.swing.JComboBox<String> combo_subcat;
    private javax.swing.JComboBox<String> combo_supplier;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JLabel lblId;
    private javax.swing.JRadioButton rad_active;
    private javax.swing.JRadioButton rad_inactive;
    private javax.swing.JTable table_product;
    private javax.swing.JTextField txt_product;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables

    private void brandCombo() {
        String query = "SELECT `Id`, `BrandName` FROM `brand` WHERE Status = '1'";
        try {
            rs = DB.search(query);
            while (rs.next()) {
                String bId = rs.getString("Id");
                String bName = rs.getString("BrandName");
                combo_brand.addItem(bId + "-" + bName);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void categoryCombo() {
        String query = "SELECT `Id`, `Name` FROM `Category` WHERE status =  '1'";
        try {
            rs = DB.search(query);
            while (rs.next()) {
                String catId = rs.getString("Id");
                String catName = rs.getString("Name");
                combo_category.addItem(catId + "-" + catName);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void subcategoryCombo() {
        String query = "SELECT `Id`, `Name` FROM `subcat` WHERE status =  '1'";
        try {
            rs = DB.search(query);
            while (rs.next()) {
                String subcId = rs.getString("Id");
                String subcName = rs.getString("Name");
                combo_subcat.addItem(subcId + "-" + subcName);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void productTable() {
        ResultSet rs1;
        dtm = (DefaultTableModel) table_product.getModel();
        dtm.setRowCount(0);
        try {

            String query = "SELECT * FROM product WHERE status = '1'";
            rs1 = DB.search(query);

            while (rs1.next()) {
                Vector v = new Vector();
                String id = rs1.getString("Id");
                String Product = rs1.getString("Description");
                String brand = rs1.getString("BrandId");
                String cat = rs1.getString("CatId");
                String subcat = rs1.getString("subCatId");
                String activeStatus = rs1.getString("ActiveStatus");

                String query1 = "SELECT `BrandName` FROM `brand` WHERE Id = '" + brand + "'";
                String query2 = "SELECT `Name` FROM `category` WHERE Id = '" + cat + "'";
                String query3 = "SELECT `Name` FROM `subcat` WHERE Id = '" + subcat + "'";

                rs = DB.search(query1);
                if (rs.next()) {
                    brand = rs.getString("BrandName");
                }
                rs = DB.search(query2);
                if (rs.next()) {
                    cat = rs.getString("Name");
                }
                rs = DB.search(query3);
                if (rs.next()) {
                    subcat = rs.getString("Name");
                }

                query = "SELECT CompanyName FROM supplier INNER JOIN supplier_has_product ON supplier_has_product.supplier_Id = supplier.Id WHERE supplier_has_product.product_Id = '" + id + "'";
                rs = DB.search(query);
                String supplier = null;
                if (rs.next()) {
                    supplier = rs.getString("CompanyName");
                }

                v.add(id);
                v.add(Product);
                v.add(brand);
                v.add(cat);
                v.add(subcat);
                v.add(supplier);

                if (activeStatus.equals("0")) {
                    v.add("Inactive");
                } else {
                    v.add("Active");
                }

                dtm.addRow(v);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void filtertablesubCat(String query) {
        dtm = (DefaultTableModel) table_product.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        table_product.setRowSorter(tr);

        tr.setRowFilter(RowFilter.regexFilter(query));
    }

    private void supplier() {
        String companyName = null;
        String id = null;
        String query = "SELECT companyName,Id FROM supplier WHERE Status = '1'";

        try {
            ResultSet rs = DB.search(query);

            while (rs.next()) {
                companyName = rs.getString("companyName");
                id = rs.getString("Id");
                combo_supplier.addItem(id + "-" + companyName);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void clear() {
                txt_product.setText("");
        combo_supplier.setSelectedIndex(0);
        combo_subcat.setSelectedIndex(0);
        combo_brand.setSelectedIndex(0);
        combo_category.setSelectedIndex(0);
        rad_active.doClick();
    }
}
